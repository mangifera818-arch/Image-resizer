// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for suggesting an ideal compression level for an image using GenAI.
 *
 * - `suggestCompression`: An exported function that takes an image data URI and suggests a compression level.
 * - `SuggestCompressionInput`: The input type for the `suggestCompression` function, which includes the image data URI.
 * - `SuggestCompressionOutput`: The output type for the `suggestCompression` function, which includes the suggested compression level.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestCompressionInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to be compressed, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type SuggestCompressionInput = z.infer<typeof SuggestCompressionInputSchema>;

const SuggestCompressionOutputSchema = z.object({
  suggestedCompressionLevel: z
    .number()
    .min(1)
    .max(100)
    .describe('The suggested compression level for the image, on a scale of 1-100.'),
});
export type SuggestCompressionOutput = z.infer<typeof SuggestCompressionOutputSchema>;

export async function suggestCompression(input: SuggestCompressionInput): Promise<SuggestCompressionOutput> {
  return suggestCompressionFlow(input);
}

const suggestCompressionPrompt = ai.definePrompt({
  name: 'suggestCompressionPrompt',
  input: {schema: SuggestCompressionInputSchema},
  output: {schema: SuggestCompressionOutputSchema},
  prompt: `You are an expert image compression specialist.

You will be provided with an image. You must analyze the image and determine the optimal compression level for the image, on a scale of 1-100, such that the image quality is still high but the file size is significantly reduced.

Return ONLY a JSON object that contains a field called suggestedCompressionLevel.

Here is the image: {{media url=photoDataUri}}`,
});

const suggestCompressionFlow = ai.defineFlow(
  {
    name: 'suggestCompressionFlow',
    inputSchema: SuggestCompressionInputSchema,
    outputSchema: SuggestCompressionOutputSchema,
  },
  async input => {
    const {output} = await suggestCompressionPrompt(input);
    return output!;
  }
);
